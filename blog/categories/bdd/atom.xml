<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bdd | C++/Python Jehad Fan Club]]></title>
  <link href="http://AnthonyAkentiev.github.io/blog/categories/bdd/atom.xml" rel="self"/>
  <link href="http://AnthonyAkentiev.github.io/"/>
  <updated>2014-10-30T21:01:40+03:00</updated>
  <id>http://AnthonyAkentiev.github.io/</id>
  <author>
    <name><![CDATA[Anton Akentiev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BDD over TDD]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/11/28/bdd-over-tdd/"/>
    <updated>2013-11-28T01:02:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/11/28/bdd-over-tdd</id>
    <content type="html"><![CDATA[<p>Today i&rsquo;m going to talk a little bit about unit-tests. First rule of any programmer - &ldquo;no tests, no product&rdquo;. Unfortunately, i got used to it too late)) Of course there are always some exceptions to that rule, but in 95% of today tasks it is mandatory.</p>

<p>Best unit-tests in my opionion are:</p>

<ol>
<li>Written by &ldquo;non-techincal&rdquo; people, like your Client, your Tester, your Grandma.
<em>Yes, i can tell integration test from unit-test. The statement above is still correct for UNIT-tests too!</em></li>
<li>Written before coding is done.</li>
<li>Small.</li>
<li>Fast: Asynchronous. Have no side-effects.</li>
<li>Easy-to write and to read.</li>
</ol>


<p>Since i have been using Node.js and decided to implement my real-world backend server using this techology, i really loved BDD style-tests.
BDD is a little different from TDD, you can read about it somewhere else <del>over the rainbow</del> in the internet. But mostly i like it because test descriptions are self-explanatory.</p>

<p>As an example&hellip;here is the result of running <strong>wovs</strong> testing-tool for <strong>forever</strong> library:</p>

<pre><code>♢ forever/core/tail 

When using forever the tail() method
     ✓ should respond with logs for the script
When the tests are over stop all forever processes
     ✓ should stop the correct number of procs

♢ forever/service/simple 

When using forever the service module
     ✓ should have the correct exports

♢ forever/workers/multiple 

When using forever and spawning two processes using the same script
     ✓ should respond with no error
When using forever and spawning two processes using the same script requests against the second child
     ✓ should respond with i know nodejitsu
     ✓ stop the child process
When using forever and spawning two processes using the same script requests against the first child
     ✓ should respond with i know nodejitsu
     ✓ stop the child process
Once the stop attempt has been made
     ✓ the processes should be dead
...
</code></pre>

<p>Do you see these small checks? They mean all tests have passed. How cool that we have human-readable descriptions!
Next is few lines of <strong>mocha</strong> output for my backend server:
<code>
Code processing module
     removeWhitespaces
          ✓ should remove whitespaces
     substituteCode
          ✓ should change code
     isJsonOk
          ✓ should check received JSON
          ✓ should check for error
          ✓ should handle empty err and throw
     changeTransactionId
          ✓ should throw error if Request-New not found
          ✓ should change ID
     makeResponseJson
          ✓ should fill all fields
          ✓ should throw if no Request-New found
          ✓ should throw if empty string is passed
          ✓ should throw if same subst is found
     makeId
          ✓ should make ID of required length
     ...
</code></p>

<p>Tests are written like this:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Code</span> <span class="nx">processing</span> <span class="nx">module</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="nx">describe</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">removeWhitespaces</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">it</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">should</span> <span class="nx">remove</span> <span class="nx">whitespaces</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">before</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">hello</span> <span class="nx">world</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">mustBe</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">helloworld</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>           <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">myLib</span><span class="p">.</span><span class="nx">removeWhitespaces</span><span class="p">(</span><span class="nx">before</span><span class="p">);</span>
</span><span class='line'>           <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">mustBe</span><span class="p">,</span><span class="nx">out</span><span class="p">);</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'> <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;substituteCode&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should change code&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
</span><span class='line'>           <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="s1">&#39;json/code_request.json.utf8&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>           <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">template</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">changeTo</span> <span class="o">=</span> <span class="s1">&#39;AAAAAAABBBBBBBC&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="nx">changeTo</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">changeTo</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">myLib</span><span class="p">.</span><span class="nx">substituteCode</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">changeTo</span><span class="p">);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">out</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">changeTo</span><span class="p">);</span>
</span><span class='line'>                <span class="nx">assert</span><span class="p">.</span><span class="nx">notEqual</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>           <span class="p">})</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should do something cool...&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>           <span class="c1">// TODO: do something cool</span>
</span><span class='line'>           <span class="c1">// TODO: assert that it is really cool!</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I really recommend <strong>mocha</strong> framework for Node.js developement. Simpy run it like this:
<code>bash
mocha --reporter spec
</code>
I played with <strong>vows</strong>, <strong>expresso</strong> and <strong>mocha</strong>.
Mocha is really the best of all (i pronounce it like &lsquo;mokka&rsquo;).</p>

<p>Remember: each test saves one whale. Cheers!</p>
]]></content>
  </entry>
  
</feed>
