<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bdd | C++/Python Jehad Fan Club]]></title>
  <link href="http://AnthonyAkentiev.github.io/blog/categories/bdd/atom.xml" rel="self"/>
  <link href="http://AnthonyAkentiev.github.io/"/>
  <updated>2013-12-08T01:47:27+04:00</updated>
  <id>http://AnthonyAkentiev.github.io/</id>
  <author>
    <name><![CDATA[Anton Akentiev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BDD over TDD]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/11/28/bdd-over-tdd/"/>
    <updated>2013-11-28T01:02:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/11/28/bdd-over-tdd</id>
    <content type="html"><![CDATA[<p>Today i&rsquo;m going to talk a little bit about unit-tests. First rule of any programmer &ndash; &ldquo;no tests, no product&rdquo;. Unfortunately, i got used to it too late)) Of course there are always some exceptions to that rule, but in 95% of today tasks it is mandatory.</p>

<p>Best unit-tests in my opionion are:</p>

<ol>
<li>Written by &ldquo;non-techincal&rdquo; people, like your Client, your Tester, your Grandma.
<em>Yes, i can tell integration test from unit-test. The statement above is still correct for UNIT-tests too!</em></li>
<li>Written before coding is done.</li>
<li>Small.</li>
<li>Fast: Asynchronous. Have no side-effects.</li>
<li>Easy-to write and to read.</li>
</ol>


<p>Since i have been using Node.js and decided to implement my real-world backend server using this techology, i really loved BDD style-tests.
BDD is a little different from TDD, you can read about it somewhere else <del>over the rainbow</del> in the internet. But mostly i like it because test descriptions are self-explanatory.</p>

<p>As an example&hellip;here is the result of running <strong>wovs</strong> testing-tool for <strong>forever</strong> library:</p>

<p>```
♢ forever/core/tail</p>

<p>When using forever the tail() method</p>

<pre><code> ✓ should respond with logs for the script
</code></pre>

<p>When the tests are over stop all forever processes</p>

<pre><code> ✓ should stop the correct number of procs
</code></pre>

<p>♢ forever/service/simple</p>

<p>When using forever the service module</p>

<pre><code> ✓ should have the correct exports
</code></pre>

<p>♢ forever/workers/multiple</p>

<p>When using forever and spawning two processes using the same script</p>

<pre><code> ✓ should respond with no error
</code></pre>

<p>When using forever and spawning two processes using the same script requests against the second child</p>

<pre><code> ✓ should respond with i know nodejitsu
 ✓ stop the child process
</code></pre>

<p>When using forever and spawning two processes using the same script requests against the first child</p>

<pre><code> ✓ should respond with i know nodejitsu
 ✓ stop the child process
</code></pre>

<p>Once the stop attempt has been made</p>

<pre><code> ✓ the processes should be dead
</code></pre>

<p>&hellip;
```</p>

<p>Do you see these small checks? They mean all tests have passed. How cool that we have human-readable descriptions!
Next is few lines of <strong>mocha</strong> output for my backend server:
```
Code processing module</p>

<pre><code> removeWhitespaces
      ✓ should remove whitespaces 
 substituteCode
      ✓ should change code 
 isJsonOk
      ✓ should check received JSON 
      ✓ should check for error 
      ✓ should handle empty err and throw 
 changeTransactionId
      ✓ should throw error if Request-New not found 
      ✓ should change ID 
 makeResponseJson
      ✓ should fill all fields 
      ✓ should throw if no Request-New found 
      ✓ should throw if empty string is passed 
      ✓ should throw if same subst is found 
 makeId
      ✓ should make ID of required length 
 ...
</code></pre>

<p>```</p>

<p>Tests are written like this:
```js</p>

<p>describe(&lsquo;Code processing module&rsquo;,function(){</p>

<pre><code> describe('removeWhitespaces',function(){
      it('should remove whitespaces',function(){
           var before = 'hello world';
           var mustBe = 'helloworld';

           var out = myLib.removeWhitespaces(before); 
           assert.equal(mustBe,out);
      })
 })

 describe('substituteCode',function(){
      it('should change code',function(done){
           var template = 'json/code_request.json.utf8';

           fs.readFile(template, 'utf8', function (err, data) {
                var changeTo = 'AAAAAAABBBBBBBC';

                assert.equal(15,changeTo.length);
                var index = data.indexOf(changeTo);
                assert.equal(-1,index);

                var out = myLib.substituteCode(data,changeTo); 
                var index = out.indexOf(changeTo);
                assert.notEqual(-1,index);

                done();
           })
      })

      it('should do something cool...',function(){
           // TODO: do something cool
           // TODO: assert that it is really cool!
      })

      ...
 })

 ...
</code></pre>

<p>})
```</p>

<p>I really recommend <strong>mocha</strong> framework for Node.js developement. Simpy run it like this:
<code>bash
mocha --reporter spec
</code>
I played with <strong>vows</strong>, <strong>expresso</strong> and <strong>mocha</strong>.
Mocha is really the best of all (i pronounce it like &lsquo;mokka&rsquo;).</p>

<p>Remember: each test saves one whale. Cheers!</p>
]]></content>
  </entry>
  
</feed>
