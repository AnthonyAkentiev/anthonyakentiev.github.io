<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[C++/Python Jehad Fan Club]]></title>
  <link href="http://AnthonyAkentiev.github.io/atom.xml" rel="self"/>
  <link href="http://AnthonyAkentiev.github.io/"/>
  <updated>2013-12-16T00:46:01+04:00</updated>
  <id>http://AnthonyAkentiev.github.io/</id>
  <author>
    <name><![CDATA[Anton Akentiev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Launch Pad: Inside Y Combinator - book review]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/12/15/the-launch-pad-book-review/"/>
    <updated>2013-12-15T23:47:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/12/15/the-launch-pad-book-review</id>
    <content type="html"><![CDATA[<p>Book &ldquo;The Launch Pad: Inside Y Combinator, Silicon Valley&rsquo;s Most Exclusive School for Startups&rdquo; is written by Randall Stross. Here is the <a href="http://www.amazon.com/Launch-Pad-Combinator-Exclusive-Startups-ebook/dp/B00AFLLS3W">link</a>.</p>

<p><img src="http://ecx.images-amazon.com/images/I/51a4sOz2THL._SY344_PJlook-inside-v2,TopRight,1,0_SH20_BO1,204,203,200_.jpg" alt="" /></p>

<h3>How to tell STARTUP from BUSINESS (even big)?</h3>

<p>Stross has good clear view of what &ldquo;startup&rdquo; means today: yes, it is only about fast pace and scalability. Everything that is not fast and scalable is ORDINARY BUSINESS. Kawasaki-Ries-Blank have said that many times.</p>

<p><em>Do you think Microsoft was a STARTUP in 80th?</em></p>

<p>The other interesting thought for me is probably about &ldquo;young means free&rdquo;. Author explains it in that way: we like youngsters not because they are smart and quick, but because they have no families and mortgages ))</p>

<h3>Quotes</h3>

<p><strong>On high stress in startups</strong></p>

<p>&ldquo;Stress levels on our families were uncomfortably high &ndash; not something we&rsquo;d like to repeat&rdquo;</p>

<p>&ldquo;She says she was glad that she had not enjoyed a higher standard of living before coming to YC &ndash; it would have been harder to give up. We are giving up cafeteria food for ramen&hellip;&rdquo;</p>

<p>&ldquo;Is this how you want to spend the next 10 years?&rdquo;</p>

<p><strong>On women in startups</strong></p>

<p>&ldquo;Only 1.7 percent of venture capital-backed startups were founded by women&rdquo;</p>

<p>&ldquo;Y combinator founded only 14 female founders to date&hellip;&rdquo; (2010)</p>

<p>&ldquo;There had been only 1 instance in which there had been an all-female team, a pair of cofounders&rdquo;</p>

<p>&ldquo;So she asked women in Berkeley&rsquo;s computer science department what toys they had played with as children &ndash; and whether Barbies were among them &ndash; and the answers she received were consistent: no Barbies. Legos were favorite toy&rdquo;</p>

<p><strong>Misc</strong></p>

<p>&ldquo;Some say Europeans are less energetic, but i don&rsquo;t believe it. I think the problem with Europe is not that they lack balls, but that they lack examples&hellip;&rdquo;</p>

<p>&ldquo;The way to get really big returns is to do things that seem crazy &ndash; like starting a new search engine in 1998 or turning down a billion-dollar acquisition offer&rdquo;</p>

<p>&ldquo;There&rsquo;s so much luck involved with startups [that] you increase your odds of success by swinging the bat multiple times&hellip;&rdquo;</p>

<p>&ldquo;The cadence of startup life is speeding up considerably&hellip;&rdquo;</p>

<h3>Conslusion</h3>

<p>I&rsquo;d give it 3+ out of 5 starts. I wanted to like this book, but there is not much new to me in it. Still, 3+ stars means that book is worth reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What if C# became open-source?]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/12/08/what-if-see-sharp-become-open-source/"/>
    <updated>2013-12-08T01:26:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/12/08/what-if-see-sharp-become-open-source</id>
    <content type="html"><![CDATA[<p>What if?</p>

<p>What if Microsoft allowed us to use C#/.NET on all platforms back in 2000s (or today)?
Look at Objective-C or Java &ndash; they all <strong>suck</strong> compared to C#. Java is really way behind See-Sharp.</p>

<p>What if they OPEN-SOURCE their platform and open all the code: Virtual machine, frameworks, etc?
Of course i am aware of Mono project )). It is a great product, but we want even more &ndash; we want support, we want freedom, we want C# on every platform (including mobile), we want that really neat language/framework to be everywhere.</p>

<p><img src="http://cdn.memegenerator.net/instances/500x/34914954.jpg" title="C# meme" alt="C# meme" /></p>

<p>I found that quote:</p>

<blockquote><p>Android chief Andy Rubin wrote in a 2005 email, “If Sun doesn’t want to work with us, we have two options: 1) Abandon our work and adopt MSFT CLR VM and C# language – or – 2) Do Java anyway and defend our decision, perhaps making enemies along the way.</p></blockquote>

<p>Imagine how different the world would be today if Google had chosen .NET instead of Java as the native development framework for the Android mobile operating system…</p>

<p>Microsoft still has this opportunity. They understand that Excel/Office/Windows domination will not last for next 10 years. Customers need cloud solutions (SkyDrive, Azure), need virtualization solutions (Hyper-V)… That is a good tries by Microsoft management. Microsoft has all powers to drive developement. They can become some kind of &lsquo;backend&rsquo; technology provider all devs will use.</p>

<p>Look into feature MS! Time is going on and passing you by.
<strong>Why not do C# next Basic?</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On iOS 7 stability]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/12/03/on-ios-7-stability/"/>
    <updated>2013-12-03T01:09:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/12/03/on-ios-7-stability</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve got 15 minutes before going to sleep and i&rsquo;d like to dedicate this time to discussing iOS7 (in)stability.
I owned many Apple products but none of them were so instable like iOS7 does.</p>

<p>I asked 5 friends/collegues of mine: 3 admitted that iOS7 is &ldquo;slow&rdquo;,&ldquo;crashes&rdquo; and &ldquo;not as stable as 6th was&rdquo;, 2 sayed it is &ldquo;ok&rdquo;.
Really, upgrading to 6th version went smooth. As far as i remember &ndash; the only issue it had was &ndash; it ate a lot of battery. That was the first Apple&rsquo;s step towards Android).</p>

<p>I like iOS7 design, i really like it.
I use my iPod 95% of time as a music/audiobook player &ndash; and i want 100% stability in these use cases. But my iPod does well everything but that!</p>

<p>Now i am listening to
<img src="http://img1.fantasticfiction.co.uk/images/n0/n708.jpg" title="Stephen King, The Eyes Of The Dragon" alt="Stephen King, The Eyes Of The Dragon" /></p>

<ul>
<li>Music player crashes every day. I loose my position (not a name of song))) and it is very difficult to find it again in 10+h audiobooks.</li>
<li>Music clicks when LockScreen is unlocked. Ahhhhh, crap.</li>
<li>I just can&rsquo;t find position with my finger! The slider is way TOO small&hellip; Shit. Seems like i&rsquo;m getting used to big Samsung screens.</li>
<li>Position is saved incorrectly if i pause and then start again. It is always minus 30-40 seconds late.</li>
<li>Music player cant restore position in 50% of tries.</li>
<li>Sometimes position freezes. I&rsquo;m jumping back to 14:55 and then again and again. Oh, maybe Jobs invented some kind of neat DJ feature? But it really annoys me.</li>
<li>The interface is SOO slow! Samdroid is very-very fast when compared. By the way, i own iPod 5! Not that old and slow 4th gen.device&hellip;</li>
</ul>


<p>Oh, Apple. Please do 64bit processing, do fingerprint recognition&hellip; But FIRST OF ALL &ndash; do fix that fucking iOS7.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BDD over TDD]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/11/28/bdd-over-tdd/"/>
    <updated>2013-11-28T01:02:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/11/28/bdd-over-tdd</id>
    <content type="html"><![CDATA[<p>Today i&rsquo;m going to talk a little bit about unit-tests. First rule of any programmer &ndash; &ldquo;no tests, no product&rdquo;. Unfortunately, i got used to it too late)) Of course there are always some exceptions to that rule, but in 95% of today tasks it is mandatory.</p>

<p>Best unit-tests in my opionion are:</p>

<ol>
<li>Written by &ldquo;non-techincal&rdquo; people, like your Client, your Tester, your Grandma.
<em>Yes, i can tell integration test from unit-test. The statement above is still correct for UNIT-tests too!</em></li>
<li>Written before coding is done.</li>
<li>Small.</li>
<li>Fast: Asynchronous. Have no side-effects.</li>
<li>Easy-to write and to read.</li>
</ol>


<p>Since i have been using Node.js and decided to implement my real-world backend server using this techology, i really loved BDD style-tests.
BDD is a little different from TDD, you can read about it somewhere else <del>over the rainbow</del> in the internet. But mostly i like it because test descriptions are self-explanatory.</p>

<p>As an example&hellip;here is the result of running <strong>wovs</strong> testing-tool for <strong>forever</strong> library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>♢ forever/core/tail 
</span><span class='line'>
</span><span class='line'>When using forever the tail() method
</span><span class='line'>     ✓ should respond with logs for the script
</span><span class='line'>When the tests are over stop all forever processes
</span><span class='line'>     ✓ should stop the correct number of procs
</span><span class='line'>
</span><span class='line'>♢ forever/service/simple 
</span><span class='line'>
</span><span class='line'>When using forever the service module
</span><span class='line'>     ✓ should have the correct exports
</span><span class='line'>
</span><span class='line'>♢ forever/workers/multiple 
</span><span class='line'>
</span><span class='line'>When using forever and spawning two processes using the same script
</span><span class='line'>     ✓ should respond with no error
</span><span class='line'>When using forever and spawning two processes using the same script requests against the second child
</span><span class='line'>     ✓ should respond with i know nodejitsu
</span><span class='line'>     ✓ stop the child process
</span><span class='line'>When using forever and spawning two processes using the same script requests against the first child
</span><span class='line'>     ✓ should respond with i know nodejitsu
</span><span class='line'>     ✓ stop the child process
</span><span class='line'>Once the stop attempt has been made
</span><span class='line'>     ✓ the processes should be dead
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Do you see these small checks? They mean all tests have passed. How cool that we have human-readable descriptions!
Next is few lines of <strong>mocha</strong> output for my backend server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Code processing module
</span><span class='line'>     removeWhitespaces
</span><span class='line'>          ✓ should remove whitespaces 
</span><span class='line'>     substituteCode
</span><span class='line'>          ✓ should change code 
</span><span class='line'>     isJsonOk
</span><span class='line'>          ✓ should check received JSON 
</span><span class='line'>          ✓ should check for error 
</span><span class='line'>          ✓ should handle empty err and throw 
</span><span class='line'>     changeTransactionId
</span><span class='line'>          ✓ should throw error if Request-New not found 
</span><span class='line'>          ✓ should change ID 
</span><span class='line'>     makeResponseJson
</span><span class='line'>          ✓ should fill all fields 
</span><span class='line'>          ✓ should throw if no Request-New found 
</span><span class='line'>          ✓ should throw if empty string is passed 
</span><span class='line'>          ✓ should throw if same subst is found 
</span><span class='line'>     makeId
</span><span class='line'>          ✓ should make ID of required length 
</span><span class='line'>     ...</span></code></pre></td></tr></table></div></figure>


<p>Tests are written like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Code processing module&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>     <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;removeWhitespaces&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should remove whitespaces&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">before</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span><span class="p">;</span>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">mustBe</span> <span class="o">=</span> <span class="s1">&#39;helloworld&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">myLib</span><span class="p">.</span><span class="nx">removeWhitespaces</span><span class="p">(</span><span class="nx">before</span><span class="p">);</span>
</span><span class='line'>               <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">mustBe</span><span class="p">,</span><span class="nx">out</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>     <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>     <span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;substituteCode&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should change code&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
</span><span class='line'>               <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="s1">&#39;json/code_request.json.utf8&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>               <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">template</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">changeTo</span> <span class="o">=</span> <span class="s1">&#39;AAAAAAABBBBBBBC&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="nx">changeTo</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">changeTo</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="nx">myLib</span><span class="p">.</span><span class="nx">substituteCode</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span><span class="nx">changeTo</span><span class="p">);</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">out</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">changeTo</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">assert</span><span class="p">.</span><span class="nx">notEqual</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>               <span class="p">})</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should do something cool...&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>               <span class="c1">// TODO: do something cool</span>
</span><span class='line'>               <span class="c1">// TODO: assert that it is really cool!</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>     <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>     <span class="p">...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>I really recommend <strong>mocha</strong> framework for Node.js developement. Simpy run it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mocha --reporter spec
</span></code></pre></td></tr></table></div></figure>


<p>I played with <strong>vows</strong>, <strong>expresso</strong> and <strong>mocha</strong>.
Mocha is really the best of all (i pronounce it like &lsquo;mokka&rsquo;).</p>

<p>Remember: each test saves one whale. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How you'd design this system (pt.1)?]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/11/23/how-youd-design-this-system/"/>
    <updated>2013-11-23T00:40:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/11/23/how-youd-design-this-system</id>
    <content type="html"><![CDATA[<p>I met one of my friends today. We&rsquo;ve been discussing (for about 2 hours) web processing system he has designed. I am going to show you (and him) my vision of that product and a little bit of real working code. Of course, i am not aware of all requirements and constraints (he-he), so that is just a sketch.</p>

<h2>Reqs:</h2>

<ol>
<li>System MUST provide API that can be accessed remotely.</li>
<li>System MUST control millions of computers in the CLOUD.</li>
<li>System MUST control servers using IPMI interface.</li>
<li>System MUST be &ldquo;secure&rdquo;.</li>
<li>System MUST monitor servers and collect statistics (kpi, load avg. etc)</li>
<li>System MAY be scalable.</li>
<li>System MUST have sophisticated tools for data monitoring:

<ul>
<li>It should allow us to &ldquo;monitor node15 and collect load avg if temperature exceeds 15 degrees&rdquo;.</li>
<li>It should allow us to &ldquo;switch node92 off when load avg. exceeds 80% over 1 hour&rdquo;.</li>
<li>It should allow us to &ldquo;alert if node41 is not responding&rdquo;.</li>
</ul>
</li>
</ol>


<h3>Simplifying: we are developing some kind of &lsquo;watching&rsquo; application that collects data and applies actions if needed.</h3>

<p>How i see that system:</p>

<ol>
<li>Watcher daemon: must collect data into Core, apply actions (IPMI) and pull tasks from Core.</li>
<li>Core: must collect data and provide Watcher with tasks.</li>
<li>Frontend Servers (let me call them like that): must process request from Clients and put them into Core.</li>
<li>Clients: have to be able to send commands and receive response to Frontend Servers.</li>
<li>High-privileged clients: admins.</li>
</ol>


<h2>Core</h2>

<p>Contains 2 key components: DB and QUEUE.
DB can be NoSQL if we can lessen some ACID requirements and want speed (and ease of use) over functionality. Read about &lsquo;relaxed consistency&rsquo;.<br/>
I will write a post about that later.</p>

<p>Some folks simply do &ldquo;always say NoSQL if have no opinion&rdquo; and don&rsquo;t understand key NoSQL features. Pure RDBMS (SQL, PostgreSQL …) is needed when you want transactions + complicated queries and so on. NoSQL is always simpler under the hood because it is more like traditional FileSystem (documents) and are easy to use.</p>

<p>The best article i&rsquo;ve ever seen on that topic is <a href="http://blog.nahurst.com/visual-guide-to-nosql-systems">here</a>:</p>

<blockquote><p>One of the primary goals of NoSQL systems is to bolster horizontal scalability. To scale horizontally, you need strong network partition tolerance which requires giving up either consistency or availability. NoSQL systems typically accomplish this by relaxing relational abilities and/or loosening transactional semantic.</p></blockquote>

<p>QUEUE (RabbitMQ, ZeroMQ …) provides us with fast &ldquo;collect tasks&rdquo; and &ldquo;get tasks&rdquo; features. Usually queues are implemented in C++ and allocates a lot of memory. So if your Core will be powered down or will crash &ndash;> all information will be lost.
If we need 100% guarantee that no information will be lost &ndash; we should use SQL DB (see above) and keep all task in single DB instead of queue.</p>

<h3>FRONTEND is a stateless RESTful HTTPS server.</h3>

<ul>
<li><p>Stateless means it keeps no data. Stateless is crucial for us. No one knows which server client will use next second. It is possible to
add balancer in front of multiple HTTP(S) servers or do Round-Robin DNS:
<img src="http://support.novell.com/techcenter/articles/img/ana2000050206.gif"></p></li>
<li><p>REST-ful means that all requests can be sent using standard GET/POST request. All URLS are nouns, not verbs:</p></li>
</ul>


<p>Example:</p>

<pre><code> https://my.com/servers/134/temperature_detectors/65  
</code></pre>

<p>It is not a good idea to use such URL style (with verbs):</p>

<pre><code> https://my.com/set-server-temp?id=134&amp;temperature=65
</code></pre>

<p>See great article on URL naming <a href="http://apigee.com/about/content/web-api-design">here</a></p>

<ul>
<li>HTTPS means we can authenticate client (using client-side certificate). And this is done automatically.
The certificate can be self-signed or issued by CerticiationAuthority (Verisign, Thawte&hellip;).</li>
</ul>


<p><strong>To be continued…</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Objective-C syntatic sugar features i like]]></title>
    <link href="http://AnthonyAkentiev.github.io/blog/2013/11/21/objective-c-syntatic-sugar-i-like/"/>
    <updated>2013-11-21T01:34:00+04:00</updated>
    <id>http://AnthonyAkentiev.github.io/blog/2013/11/21/objective-c-syntatic-sugar-i-like</id>
    <content type="html"><![CDATA[<p>Let me start by saying that i really hate Objective-C and all that &lsquo;old-C-preprocessor&rsquo; stuff Apple feeds us in 21st century.
But i hate C++ even more, because i use it more often )) Simple as that.</p>

<p>Fortunately, there are some features i really DO like in Objective-C. Let me show you 3 of them:</p>

<h2>Method names are awesome</h2>

<p>Get used to this style and you&rsquo;ll want C++ to be more &lsquo;Objective&rsquo;. For example, this is the good Objective-C method name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">downloadInfoAboutUser:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">code</span>
</span><span class='line'>                  <span class="nf">withTarget:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">target</span>
</span><span class='line'>                 <span class="nf">andSelector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">callbackSelector</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>or this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setImage:</span><span class="p">(</span><span class="n">UIImage</span><span class="o">*</span><span class="p">)</span><span class="nv">image</span>
</span><span class='line'>         <span class="nf">toCell:</span><span class="p">(</span><span class="n">UITableViewCell</span><span class="o">*</span><span class="p">)</span><span class="nv">cell</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>NOT this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setImageToCell:</span><span class="p">(</span><span class="n">UIImage</span><span class="o">*</span><span class="p">)</span><span class="nv">anImage</span>
</span><span class='line'>                 <span class="nf">cell:</span><span class="p">(</span><span class="n">UITableViewCell</span><span class="o">*</span><span class="p">)</span><span class="nv">aCell</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Private means PRIVATE</h2>

<p>I really like that <strong>private</strong> methods are <strong>REALLY</strong> private and are not <strong>visible</strong> in .h file.
Example of .h file for class MainTabBarController goes here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">MainTabBarController</span> : <span class="nc">UITabBarController</span><span class="o">&lt;</span><span class="n">UITabBarControllerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems like this class has no public methods client can use? Yeah, that is what i want C++ to be like.
If you need some private properties or private methods &ndash; simply declare them in your .m file. Piece of cake.</p>

<h2>No hate for categories</h2>

<p>Categories are really useful syntatic sugar. See this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@interface</span> <span class="nc">NSString</span> <span class="p">(</span> <span class="n">containsCategory</span> <span class="p">)</span>
</span><span class='line'>     <span class="o">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">isContainsString:</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">substring</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="p">(</span> <span class="n">containsCategory</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="nl">isContainsString:</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="n">substring</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">rangeOfString</span> <span class="o">:</span> <span class="n">substring</span><span class="p">];</span>
</span><span class='line'>     <span class="kt">BOOL</span> <span class="n">found</span> <span class="o">=</span> <span class="p">(</span> <span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span> <span class="p">);</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>After declaring that &ndash; you don&rsquo;t need any inheritance or whatever&hellip; Simply use your NSString-s with new method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">imageName</span> <span class="o">=</span> <span class="s">@&quot;blah-blah-blah&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">isPng</span> <span class="o">=</span> <span class="p">[</span><span class="n">imageName</span> <span class="nl">isContainsString:</span><span class="s">@&quot;.png&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thanks for watching. To be continued&hellip;</p>
]]></content>
  </entry>
  
</feed>
